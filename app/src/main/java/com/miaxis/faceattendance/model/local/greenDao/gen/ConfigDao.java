package com.miaxis.faceattendance.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.faceattendance.model.entity.Config;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIG".
*/
public class ConfigDao extends AbstractDao<Config, Long> {

    public static final String TABLENAME = "CONFIG";

    /**
     * Properties of entity Config.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UploadUrl = new Property(1, String.class, "uploadUrl", false, "UPLOAD_URL");
        public final static Property CardUploadUrl = new Property(2, String.class, "cardUploadUrl", false, "CARD_UPLOAD_URL");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property VerifyQualityScore = new Property(4, float.class, "verifyQualityScore", false, "VERIFY_QUALITY_SCORE");
        public final static Property RegisterQualityScore = new Property(5, float.class, "registerQualityScore", false, "REGISTER_QUALITY_SCORE");
        public final static Property VerifyScore = new Property(6, float.class, "verifyScore", false, "VERIFY_SCORE");
        public final static Property CardVerifyScore = new Property(7, float.class, "cardVerifyScore", false, "CARD_VERIFY_SCORE");
        public final static Property RecordClearThreshold = new Property(8, int.class, "recordClearThreshold", false, "RECORD_CLEAR_THRESHOLD");
        public final static Property AttendancePrompt = new Property(9, String.class, "attendancePrompt", false, "ATTENDANCE_PROMPT");
        public final static Property CardVerifyPrompt = new Property(10, String.class, "cardVerifyPrompt", false, "CARD_VERIFY_PROMPT");
        public final static Property WhitelistPrompt = new Property(11, String.class, "whitelistPrompt", false, "WHITELIST_PROMPT");
    }


    public ConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UPLOAD_URL\" TEXT," + // 1: uploadUrl
                "\"CARD_UPLOAD_URL\" TEXT," + // 2: cardUploadUrl
                "\"PASSWORD\" TEXT," + // 3: password
                "\"VERIFY_QUALITY_SCORE\" REAL NOT NULL ," + // 4: verifyQualityScore
                "\"REGISTER_QUALITY_SCORE\" REAL NOT NULL ," + // 5: registerQualityScore
                "\"VERIFY_SCORE\" REAL NOT NULL ," + // 6: verifyScore
                "\"CARD_VERIFY_SCORE\" REAL NOT NULL ," + // 7: cardVerifyScore
                "\"RECORD_CLEAR_THRESHOLD\" INTEGER NOT NULL ," + // 8: recordClearThreshold
                "\"ATTENDANCE_PROMPT\" TEXT," + // 9: attendancePrompt
                "\"CARD_VERIFY_PROMPT\" TEXT," + // 10: cardVerifyPrompt
                "\"WHITELIST_PROMPT\" TEXT);"); // 11: whitelistPrompt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Config entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uploadUrl = entity.getUploadUrl();
        if (uploadUrl != null) {
            stmt.bindString(2, uploadUrl);
        }
 
        String cardUploadUrl = entity.getCardUploadUrl();
        if (cardUploadUrl != null) {
            stmt.bindString(3, cardUploadUrl);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindDouble(5, entity.getVerifyQualityScore());
        stmt.bindDouble(6, entity.getRegisterQualityScore());
        stmt.bindDouble(7, entity.getVerifyScore());
        stmt.bindDouble(8, entity.getCardVerifyScore());
        stmt.bindLong(9, entity.getRecordClearThreshold());
 
        String attendancePrompt = entity.getAttendancePrompt();
        if (attendancePrompt != null) {
            stmt.bindString(10, attendancePrompt);
        }
 
        String cardVerifyPrompt = entity.getCardVerifyPrompt();
        if (cardVerifyPrompt != null) {
            stmt.bindString(11, cardVerifyPrompt);
        }
 
        String whitelistPrompt = entity.getWhitelistPrompt();
        if (whitelistPrompt != null) {
            stmt.bindString(12, whitelistPrompt);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Config entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uploadUrl = entity.getUploadUrl();
        if (uploadUrl != null) {
            stmt.bindString(2, uploadUrl);
        }
 
        String cardUploadUrl = entity.getCardUploadUrl();
        if (cardUploadUrl != null) {
            stmt.bindString(3, cardUploadUrl);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindDouble(5, entity.getVerifyQualityScore());
        stmt.bindDouble(6, entity.getRegisterQualityScore());
        stmt.bindDouble(7, entity.getVerifyScore());
        stmt.bindDouble(8, entity.getCardVerifyScore());
        stmt.bindLong(9, entity.getRecordClearThreshold());
 
        String attendancePrompt = entity.getAttendancePrompt();
        if (attendancePrompt != null) {
            stmt.bindString(10, attendancePrompt);
        }
 
        String cardVerifyPrompt = entity.getCardVerifyPrompt();
        if (cardVerifyPrompt != null) {
            stmt.bindString(11, cardVerifyPrompt);
        }
 
        String whitelistPrompt = entity.getWhitelistPrompt();
        if (whitelistPrompt != null) {
            stmt.bindString(12, whitelistPrompt);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Config readEntity(Cursor cursor, int offset) {
        Config entity = new Config( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uploadUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardUploadUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.getFloat(offset + 4), // verifyQualityScore
            cursor.getFloat(offset + 5), // registerQualityScore
            cursor.getFloat(offset + 6), // verifyScore
            cursor.getFloat(offset + 7), // cardVerifyScore
            cursor.getInt(offset + 8), // recordClearThreshold
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // attendancePrompt
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cardVerifyPrompt
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // whitelistPrompt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Config entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUploadUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardUploadUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVerifyQualityScore(cursor.getFloat(offset + 4));
        entity.setRegisterQualityScore(cursor.getFloat(offset + 5));
        entity.setVerifyScore(cursor.getFloat(offset + 6));
        entity.setCardVerifyScore(cursor.getFloat(offset + 7));
        entity.setRecordClearThreshold(cursor.getInt(offset + 8));
        entity.setAttendancePrompt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCardVerifyPrompt(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWhitelistPrompt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Config entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Config entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Config entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
