package com.miaxis.faceattendance.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.faceattendance.model.entity.converter.DateConverter;

import com.miaxis.faceattendance.model.entity.WhiteCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WHITE_CARD".
*/
public class WhiteCardDao extends AbstractDao<WhiteCard, String> {

    public static final String TABLENAME = "WHITE_CARD";

    /**
     * Properties of entity WhiteCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardNumber = new Property(0, String.class, "cardNumber", true, "CARD_NUMBER");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property RegisterTime = new Property(2, Long.class, "registerTime", false, "REGISTER_TIME");
    }

    private final DateConverter registerTimeConverter = new DateConverter();

    public WhiteCardDao(DaoConfig config) {
        super(config);
    }
    
    public WhiteCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WHITE_CARD\" (" + //
                "\"CARD_NUMBER\" TEXT PRIMARY KEY NOT NULL ," + // 0: cardNumber
                "\"NAME\" TEXT," + // 1: name
                "\"REGISTER_TIME\" INTEGER);"); // 2: registerTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WHITE_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WhiteCard entity) {
        stmt.clearBindings();
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(1, cardNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(3, registerTimeConverter.convertToDatabaseValue(registerTime));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WhiteCard entity) {
        stmt.clearBindings();
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(1, cardNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(3, registerTimeConverter.convertToDatabaseValue(registerTime));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public WhiteCard readEntity(Cursor cursor, int offset) {
        WhiteCard entity = new WhiteCard( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cardNumber
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : registerTimeConverter.convertToEntityProperty(cursor.getLong(offset + 2)) // registerTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WhiteCard entity, int offset) {
        entity.setCardNumber(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegisterTime(cursor.isNull(offset + 2) ? null : registerTimeConverter.convertToEntityProperty(cursor.getLong(offset + 2)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WhiteCard entity, long rowId) {
        return entity.getCardNumber();
    }
    
    @Override
    public String getKey(WhiteCard entity) {
        if(entity != null) {
            return entity.getCardNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WhiteCard entity) {
        return entity.getCardNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
